
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
    <title>ITSM Portal</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet"/>
	<link rel="stylesheet" href="{{ url_for('static', filename='style.css') }}">

</head>
<body data-tab="{{ active_tab }}" data-username="{{ session.get('username') }}" data-role="{{ session.get('role') }}">

<div class="container mt-4">

<nav class="navbar navbar-expand-lg navbar-dark bg-dark">
  <div class="container-fluid">
    <a class="navbar-brand" href="{{ url_for('index') }}"></a>
    <div class="collapse navbar-collapse justify-content-end">
      <ul class="navbar-nav">
        {% if session.get('username') %}
        <li class="nav-item">
          <span class="nav-link text-white">Logged in as <strong>{{ session.get('username') }}</strong></span>
        </li>
        <li class="nav-item">
          <a class="nav-link text-white" href="{{ url_for('logout') }}">Logout</a>
        </li>
        {% else %}
        <li class="nav-item">
          <a class="nav-link text-white" href="{{ url_for('login') }}">Login</a>
        </li>
        {% endif %}
      </ul>
    </div>
  </div>
</nav>




    <!-- Header -->
    <div class="text-center mb-4">
        <h1 class="page-title">ITSM TICKET MANAGEMENT TOOL</h1>
        <div class="nav-tabs-container d-flex justify-content-between align-items-center">
        <div class="d-flex gap-2">
            <button class="nav-tab active" id="home-tab">Home</button>
            <button class="nav-tab" id="incident-tab">Incident</button>
            <button class="nav-tab" id="search-tab">Search</button>
			{% if session.get('role') == 'admin' %}
				<button class="nav-tab" id="create-tab">Create Ticket</button>
				<button class="nav-tab" id="manage-tab">Manage Users</button>
			{% endif %}
        </div>
      
   
    </div>
{% if session.get('role') == 'admin' %}	
		<!-- Add/Remove User Modal -->
<!-- Manage Users Section -->
<div id="manage-section" class="card mt-5" >
    <div class="card-header">
        <ul class="nav nav-tabs card-header-tabs" id="userTab" role="tablist">
			<li class="nav-item">
                <button class="nav-tab active" id="existing-user-tab" data-bs-toggle="tab" data-bs-target="#existing-user" type="button" role="tab">Existing Users</button>
            </li>
            <li class="nav-item">
                <button class="nav-tab" id="add-user-tab" data-bs-toggle="tab" data-bs-target="#add-user" type="button" role="tab">Add User</button>
            </li>
            
        </ul>
    </div>
    <div class="card-body tab-content" id="userTabContent">
        <!-- Add User Tab -->
        <div class="tab-pane fade" id="add-user" role="tabpanel">
            <form method="POST" action="{{ url_for('manage_users') }}">
                <input type="hidden" name="action" value="add">
                <div class="mb-3">
                    <label for="username" class="form-label">Username</label>
                    <input type="text" class="form-control" name="username" required>
                </div>
                <div class="mb-3">
                    <label for="password" class="form-label">Password</label>
                    <input type="password" class="form-control" name="password" required>
                </div>
                <div class="mb-3">
                    <label for="role" class="form-label">Role</label>
                    <select class="form-select" name="role" required>
                        <option value="admin">Admin</option>
                        <option value="readonly">Readonly</option>
                    </select>
                </div>
                <button type="submit" class="btn btn-primary">Add User</button>
            </form>
        </div>

        <!-- Existing Users Tab -->
        <div class="tab-pane fade show active" id="existing-user" role="tabpanel">
            <table class="table table-bordered">
                <thead>
                    <tr>
                        <th>Username</th>
                        <th>Role</th>
                        <th>Action</th>
                    </tr>
                </thead>
                <tbody id="usersTableBody">
                    {% if users %}
                        {% for user in users %}
                            <tr>
                                <td>{{ user.username }}</td>
                                <td>{{ user.role }}</td>
                                <td>
                                    <button class="btn btn-danger btn-sm" onclick="confirmDelete('{{ user.username }}')">Delete</button>
                                </td>
                            </tr>
                        {% endfor %}
                    {% else %}
                        <tr>
                            <td colspan="3">No users found.</td>
                        </tr>
                    {% endif %}
                </tbody>
            </table>
        </div>
    </div>
</div>

<!-- Delete User Confirmation Modal -->
<div class="modal fade" id="deleteUserModal" tabindex="-1" aria-labelledby="deleteUserLabel" aria-hidden="true">
    <div class="modal-dialog">
        <form method="POST" action="{{ url_for('manage_users') }}">
            <input type="hidden" name="action" value="remove">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="deleteUserLabel">Confirm Delete</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                </div>
                <div class="modal-body">
                    Are you sure you want to delete user <strong id="deleteUsernameDisplay"></strong>?
                    <input type="hidden" name="username" id="deleteUsernameInput">
                </div>
                <div class="modal-footer">
                    <button type="submit" class="btn btn-danger">Yes, Delete</button>
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                </div>
            </div>
        </form>
    </div>
</div>
{% endif %}


    <!-- Search Section (hidden by default) -->
    <div id="search-section" class="search-section d-none">
        <form action="{{ url_for('search') }}" method="POST" class="d-flex">
            <input type="text" class="form-control form-control-lg me-2" name="search_query"
                   placeholder="Search incidents by title" value="{{ search_query }}">
            <button type="submit" class="btn btn-primary">Search</button>
            <a href="{{ url_for('search') }}" class="btn btn-secondary ms-2">Clear</a>
        </form>
    </div>
	<!-- Dashboard Charts (Visible only in Home tab) -->
<div id="dashboard-section" class="row mt-4">
    <!-- Pie Chart: Priority -->
    <div class="col-md-6">
        <div class="card">
            <div class="card-header">Ticket Priority Distribution</div>
            <div class="card-body">
                <canvas id="priorityChart"></canvas>
            </div>
        </div>
    </div>

    <!-- Bar Chart: Status -->
    <div class="col-md-6">
        <div class="card">
            <div class="card-header">Ticket Status Distribution</div>
            <div class="card-body">
                <canvas id="statusChart"></canvas>
            </div>
        </div>
    </div>
</div>

{% if session.get('role') == 'admin' %}
    <!-- Create Ticket --><div id="create-ticket-section">
   <div id="ticket-section" class="card mt-4">
    <div class="card-header">
        {% if edit_ticket %}
            Edit Ticket{{ edit_ticket[0] }}
        {% else %}
            Create New Ticket
        {% endif %}
    </div>
    <div class="card-body">
        <form action="{% if edit_ticket %}{{ url_for('edit_ticket_route', ticket_id=edit_ticket[0]) }}{% else %}{{ url_for('add_ticket_route') }}{% endif %}" method="POST">
            <div class="mb-3">
                <label for="title" class="form-label">Ticket Title</label>
                <input type="text" class="form-control" id="title" name="title" required
                       value="{{ edit_ticket[1] if edit_ticket else '' }}">
            </div>
            <div class="mb-3">
                <label for="description" class="form-label">Description</label>
                <textarea class="form-control" id="description" name="description" rows="4" required>{{ edit_ticket[2] if edit_ticket else '' }}</textarea>
            </div>
            <div class="mb-3">
                <label for="priority" class="form-label">Priority</label>
                <select class="form-select" id="priority" name="priority" required>
                    {% for level in ['High', 'Medium', 'Low'] %}
                        <option value="{{ level }}" {% if edit_ticket and edit_ticket[3] == level %}selected{% endif %}>{{ level }}</option>
                    {% endfor %}
                </select>
            </div>
            <button type="submit" class="btn btn-success">
                {% if edit_ticket %}Update Ticket{% else %}Submit Ticket{% endif %}
            </button>
        </form>
    </div>
</div>
    </div><!-- End Ticket Section -->
{% endif %}

<!-- Flash Messages 
    {% with messages = get_flashed_messages(with_categories=true) %}
        {% if messages %}
            {% for category, message in messages %}
                <div class="alert alert-{{ category }} mt-3" role="alert">
                    {{ message }}
                </div>
            {% endfor %}
        {% endif %}
    {% endwith %} -->
	
	{% with messages = get_flashed_messages(with_categories=true) %}
  {% if messages %}
    {% for category, message in messages %}
      <div class="alert alert-{{ category }} alert-dismissible fade show" role="alert">
        {{ message }}
        <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
      </div>
    {% endfor %}
  {% endif %}
{% endwith %} 

    <!-- Ticket Table -->
    <div id="incident-section" class="card mt-4">
        <div class="card-header">Tickets</div>
        <div class="card-body table-responsive">
            <table class="table table-bordered align-middle">
                <thead class="table-light">
                <tr>
                    <th>ID</th>
                    <th>Title</th>
                    <th>Description</th>
                    <th>Priority</th>
                    <th>Status</th>
                    <th>Created At</th>
                    <th>Actions</th>
                </tr>
                </thead>
                <tbody>
                {% for ticket in tickets %}
                    <tr class="table-light">
                        <td>{{ ticket[0] }}</td>
                        <td>{{ ticket[1] }}</td>
                        <td>{{ ticket[2] }}</td>
                        <td class="priority-{{ ticket[3].lower() }}">{{ ticket[3] }}</td>
                        <td class="status-{{ ticket[4].lower().replace(' ', '-') }}">{{ ticket[4] }}</td>
                        <td>{{ ticket[5] }}</td>
                        <td>
                            <a href="{{ url_for('update_status_route', ticket_id=ticket[0], status='Open') }}" class="btn btn-sm btn-outline-primary">Open</a>
                            <a href="{{ url_for('update_status_route', ticket_id=ticket[0], status='In Progress') }}" class="btn btn-sm btn-outline-warning">In Progress</a>
                            <a href="{{ url_for('update_status_route', ticket_id=ticket[0], status='Resolved') }}" class="btn btn-sm btn-outline-success">Resolved</a>
                            
							{% if session.get('role') == 'admin' %}
								<a href="{{ url_for('edit_ticket_route', ticket_id=ticket[0]) }}" class="btn btn-sm btn-outline-info">Edit</a>
							{% endif %}


                        </td>
                    </tr>
                {% endfor %}
                </tbody>
            </table>
        </div>
    </div>

</div>

<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>

<script>
Chart.defaults.backgroundColor = 'transparent';
	
    const searchTab = document.getElementById('search-tab');
    const incidentTab = document.getElementById('incident-tab');
    const homeTab = document.getElementById('home-tab');
	const createTab = document.getElementById('create-tab');		
    const searchSection = document.getElementById('search-section');
    const tabs = [searchTab, incidentTab, homeTab];//, createTab, manageTab];
	const incidentSection = document.getElementById('incident-section');
	const ticketSection = document.getElementById('ticket-section');
	const manageTab = document.getElementById('manage-tab');
	const manageSection = document.getElementById('manage-section');
	
	if (createTab) tabs.push(createTab);
	if (manageTab) tabs.push(manageTab);
document.addEventListener('DOMContentLoaded', function () {

    const tab = document.body.getAttribute('data-tab');
    if (tab === 'search') {
        searchTab.click();
    } else if (tab === 'incident') {
        incidentTab.click();
    } else if (tab === 'create' && createTab) {
        createTab.click();
    } else if (tab === 'manage' && manageTab) {
		manageTab.click();
	}else if (tab === 'home') {
		homeTab.click();
	}else {
        console.warn("Unknown tab:", tab);
		homeTab.click();
    }
	const alerts = document.querySelectorAll('.alert');
    alerts.forEach(alert => {
        setTimeout(() => {
            alert.classList.add('fade');
            setTimeout(() => alert.remove(), 500);  // remove after fade
        }, 3000);  // 3 seconds delay before fading
    });
	const userTab = new bootstrap.Tab(document.getElementById('existing-user-tab'));
    document.getElementById('existing-user-tab').addEventListener('shown.bs.tab', () => {
        loadUsers();
    });
	
});



	function showManageSection(show) {
		const manageSection = document.getElementById('manage-section');
		if (manageSection) {
			manageSection.classList.toggle('d-none', !show);
    }
	}

	function showDashboard(show) {
    const dashboardSection = document.getElementById('dashboard-section');
    dashboardSection.classList.toggle('d-none', !show);
	}


	function showIncidentList(show) {
    incidentSection.style.display = show ? 'block' : 'none';
	}

    function activateTab(selectedTab) {
        tabs.forEach(tab => tab.classList.remove('active'));
        selectedTab.classList.add('active');
    }
	
	function showCreateTicket(show) {
        const ticketSection = document.getElementById('ticket-section');
			if (ticketSection) {
				ticketSection.style.display = show ? 'block' : 'none';
			}
    }

    searchTab.addEventListener('click', () => {
    activateTab(searchTab);
    searchSection.classList.remove('d-none');
    showCreateTicket(false);
    showIncidentList(true);  // ❌ Hide incidents
	showDashboard(false);
	showManageSection(false);
	});

incidentTab.addEventListener('click', () => {
    activateTab(incidentTab);
    searchSection.classList.add('d-none');
    showCreateTicket(false);
    showIncidentList(true);   // ✅ Show incidents 
	 showDashboard(false);                                                     
	 showManageSection(false);                                                 
	});                                                                        
																			   
homeTab.addEventListener('click', () => {                                      
    activateTab(homeTab);
    searchSection.classList.add('d-none');
    showCreateTicket(false);
    showIncidentList(false);  // Optional: hide incidents
	showDashboard(true);
	showManageSection(false);
	
	
    fetch('/get_chart_data')
		.then(response => response.json())
		.then(data => {
			renderCharts(data.priority_counts, data.status_counts);
		})
		.catch(error => {
			console.error('Error fetching chart data:', error);
	});

	
	});
	
if (createTab) {
createTab.addEventListener('click', () => {
    activateTab(createTab);
    searchSection.classList.add('d-none');
    showCreateTicket(true);
    showIncidentList(false);  // Optional: hide incidents
	showDashboard(false);
	showManageSection(false);
	});
}

if (manageTab) {
manageTab.addEventListener('click', () => {
    activateTab(manageTab);
    showCreateTicket(false);
    showIncidentList(false);
    showDashboard(false);
    searchSection.classList.add('d-none');
    showManageSection(true);
});
}
// Render charts

const chartBackgroundPlugin = {
    id: 'custom_canvas_background_color',
    beforeDraw: (chart, args, options) => {
        const { ctx } = chart;
        ctx.save();
        ctx.globalCompositeOperation = 'destination-over';
        ctx.fillStyle = options.color || 'white'; // ⬅️ Set fallback color
        ctx.fillRect(0, 0, chart.width, chart.height);
        ctx.restore();
    }
};

let priorityChartInstance = null;
let statusChartInstance = null;

const priorityData = {{ priority_counts | default({}) | tojson }};
const statusData = {{ status_counts | default({}) | tojson }};

function renderCharts(priorityData, statusData) {
    const priorityLabels = ['High', 'Medium', 'Low'];
    const priorityValues = Object.values(priorityData);

    const statusLabels = ['In Progress', 'Open', 'Resolved'];
    const statusValues = Object.values(statusData);

    const priorityCtx = document.getElementById('priorityChart');
    const statusCtx = document.getElementById('statusChart');

    // Destroy old charts if they exist
    if (priorityChartInstance) {
        priorityChartInstance.destroy();
    }
    if (statusChartInstance) {
        statusChartInstance.destroy();
    }

    // Create new pie chart
    priorityChartInstance = new Chart(priorityCtx, {
        type: 'pie',
        data: {
            labels: priorityLabels,
            datasets: [{
                data: priorityValues,
                backgroundColor: ['#ff6384', '#4bc0c0', '#ffcd56']
            }]
        },
        options: {
            plugins: {
                legend: {
                    labels: {
                        color: "#a7d9f7",
                        font: { weight: 'bold' }
                    }
                },
                title: {
                    display: true,
                    text: 'Ticket Priority Distribution',
                    color: '#a7d9f7'
                }
            }
        }
    });

    // Create new bar chart
    statusChartInstance = new Chart(statusCtx, {
        type: 'bar',
        data: {
            labels: statusLabels,
            datasets: [{
                label: 'Number of Tickets',
                data: statusValues,
                backgroundColor: '#3182ce'
            }]
        },
        options: {
            scales: {
                x: {
                    ticks: { color: "#a7d9f7" }
                },
                y: {
                    ticks: { color: "white" }
                }
            },
            plugins: {
                legend: {
                    labels: {
                        color: "#a7d9f7",
                        font: { weight: 'bold' }
                    }
                },
                title: {
                    display: true,
                    text: 'Ticket Status Distribution',
                    color: '#a7d9f7'
                }
            }
        }
    });
}



 function confirmDelete(username) {
        document.getElementById('deleteUsernameDisplay').innerText = username;
        document.getElementById('deleteUsernameInput').value = username;
        new bootstrap.Modal(document.getElementById('deleteUserModal')).show();
    }

// Run only if charts are on the page



function confirmDelete(username) {
    document.getElementById('deleteUsernameDisplay').textContent = username;
    document.getElementById('deleteUsernameInput').value = username;
    var deleteModal = new bootstrap.Modal(document.getElementById('deleteUserModal'));
    deleteModal.show();
}

function loadUsers() {
    fetch('/existing_users')
        .then(response => response.json())
        .then(data => {
            const tbody = document.getElementById('usersTableBody');
            tbody.innerHTML = ''; // Clear existing rows
            if (data.error) {
                tbody.innerHTML = '<tr><td colspan="3">Unauthorized</td></tr>';
            } else if (data.length === 0) {
                tbody.innerHTML = '<tr><td colspan="3">No users found.</td></tr>';
            } else {
                data.forEach(user => {
                    const row = document.createElement('tr');
                    row.innerHTML = `
                        <td>${user.username}</td>
                        <td>${user.role}</td>
                        <td><button class="btn btn-danger btn-sm" onclick="confirmDelete('${user.username}')">Delete</button></td>
                    `;
                    tbody.appendChild(row);
                });
            }
        })
        .catch(error => {
            console.error('Error fetching users:', error);
            document.getElementById('usersTableBody').innerHTML = '<tr><td colspan="3">Error loading users.</td></tr>';
        });
}
    </script>
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>


</body>
</html>
